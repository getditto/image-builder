name: Build and Publish AMI

on:
   push:
      branches:
         - main
         - ore/ditto-image-builder
   workflow_dispatch:
      inputs:
         k8s_version:
            description: "Specify the Kubernetes version"
            required: false
            default: "1.27.15"
            options:
               - "1.27.15"
               - "1.28.15"
               - "1.30.10"
               - "1.31.4"

permissions:
  id-token: write   # This is crucial for OIDC authentication
  contents: read    # Allows reading repository contents

jobs:
   build-ami:
      name: Build and Publish AMI
      runs-on: ubuntu-latest
      env:
         AWS_REGION: "us-east-2"
         ACCOUNT_ID: "261908217831"
         ROLE: "image-builder-runner"
         AWS_OUTPUT: "json"
      strategy:
         matrix:
            region:
               - us-east-1
               - us-east-2
               - us-west-1
               - us-west-2
               - ap-south-1
               - ap-northeast-1
               - ap-northeast-2
               - ap-southeast-1
               - ap-southeast-2
               - ca-central-1
               - eu-central-1
               - eu-west-1
               - eu-west-2
               - eu-west-3
               - sa-east-1

      steps:
         - name: Checkout repository
           uses: actions/checkout@v3


         - name: Set up AWS
           uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
           with:
              aws-region: ${{ env.AWS_REGION }}
              role-to-assume: "arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.ROLE }}"
              role-session-name: image-builder@build-cluster-api-images=${{ github.run_id }}
              role-duration-seconds: 3600

         - name: Setup Packer
           uses: hashicorp/setup-packer@main
           with:
             version: "latest"

         - name: Install Packer Amazon Plugin
           run: |
            packer plugins install github.com/hashicorp/amazon

         - name: Validate Packer template
           run: |
              packer init -upgrade ./images/capi/packer/config.pkr.hcl 
              make validate-ami-ubuntu-2404 

         - name: Build AMI
           env:
              AWS_PROFILE: ditto-prod-primary
           run: |
              make build-ami-ubuntu-2404 \
              AWS_REGION=${{ env.AWS_REGION }}

         - name: Make AMI Public
           env:
             AWS_REGION: ${{ env.AWS_REGION }}
           run: |
             if [ -f "./output/packer-manifest.json" ]; then
               echo "Found packer-manifest.json in the expected location."
               for REGION in ${{ matrix.region }}; do
                AMI_ID=$(jq -r --arg REGION "$REGION" '.builds[] | select(.region == $REGION) | .artifact_id' < ./output/packer-manifest.json | cut -d':' -f2 | xargs)
                if [ -n "$AMI_ID" ]; then
                  echo "Making AMI $AMI_ID in region $REGION public."
                  aws ec2 modify-image-attribute --region $REGION --image-id $AMI_ID --launch-permission "{\"Add\": [{\"Group\":\"all\"}]}"
                  echo "AMI $AMI_ID in region $REGION is now public."
                else
                  echo "No AMI found for region $REGION in packer-manifest.json."
                fi
               done
             else
               echo "Error: packer-manifest.json file not found in the expected location."
               echo "Searching for packer-manifest.json in the current directory..."
               PACKER_MANIFEST_PATH=$(find . -name "packer-manifest.json" | head -n 1)
               if [ -n "$PACKER_MANIFEST_PATH" ]; then
                echo "Found packer-manifest.json at $PACKER_MANIFEST_PATH"
                for REGION in ${{ matrix.region }}; do
                  AMI_ID=$(jq -r --arg REGION "$REGION" '.builds[] | select(.region == $REGION) | .artifact_id' < "$PACKER_MANIFEST_PATH" | cut -d':' -f2 | xargs)
                  if [ -n "$AMI_ID" ]; then
                   echo "Making AMI $AMI_ID in region $REGION public."
                   aws ec2 modify-image-attribute --region $REGION --image-id $AMI_ID --launch-permission "{\"Add\": [{\"Group\":\"all\"}]}"
                   echo "AMI $AMI_ID in region $REGION is now public."
                  else
                   echo "No AMI found for region $REGION in packer-manifest.json."
                  fi
                done
               else
                echo "Error: packer-manifest.json file could not be found."
                exit 1
               fi
             fi
